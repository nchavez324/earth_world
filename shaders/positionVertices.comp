#version 430

#pragma include "common.glsl"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(std430) buffer u_VertexBuffer {
  vec3 positions[];
};
uniform uint u_VerticesPerEdge;
uniform sampler2D u_TopologyTex;
uniform sampler2D u_BathymetryTex;
uniform sampler2D u_LandMaskTex;

void main() {
  if (gl_GlobalInvocationID.x >= u_VerticesPerEdge ||
      gl_GlobalInvocationID.y >= u_VerticesPerEdge ||
      gl_GlobalInvocationID.z >= 6) {
    return;
  }
  vec3 normal = vec3(0, 0, 0);
  switch (gl_GlobalInvocationID.z) {
  case 0: normal = vec3(+1, 0, 0); break;
  case 1: normal = vec3(-1, 0, 0); break;
  case 2: normal = vec3(0, +1, 0); break;
  case 3: normal = vec3(0, -1, 0); break;
  case 4: normal = vec3(0, 0, -1); break;
  case 5: normal = vec3(0, 0, +1); break;
  }
  vec3 axis1 = vec3(normal.y, normal.z, normal.x);
  vec3 axis2 = cross(axis1, normal);
  vec3 faceOrigin = normal - axis1 - axis2;

  uint vertexIndex =
      (u_VerticesPerEdge * u_VerticesPerEdge * gl_GlobalInvocationID.z) +
      (u_VerticesPerEdge * gl_GlobalInvocationID.y) +
      gl_GlobalInvocationID.x;  
  float patchSize = 2.0 / (u_VerticesPerEdge - 1);
  vec3 cubePos =
      faceOrigin +
      (gl_GlobalInvocationID.x * patchSize * axis1) +
      (gl_GlobalInvocationID.y * patchSize * axis2);
  vec3 cubePos2 = vec3(
    pow(cubePos.x, 2),
    pow(cubePos.y, 2),
    pow(cubePos.z, 2));
  vec3 spherePosition = vec3(
    cubePos.x * sqrt(1 - cubePos2.y/2 - cubePos2.z/2 + cubePos2.y*cubePos2.z/3),
    cubePos.y * sqrt(1 - cubePos2.z/2 - cubePos2.x/2 + cubePos2.z*cubePos2.x/3),
    cubePos.z * sqrt(1 - cubePos2.x/2 - cubePos2.y/2 + cubePos2.x*cubePos2.y/3));
  
  float magnitude = 1;
  vec2 sphereUV = sphericalUVFromCartesian(spherePosition);
  float topology = texture(u_TopologyTex, sphereUV).r;
  float bathymetry = texture(u_BathymetryTex, sphereUV).r;
  float landMask = texture(u_LandMaskTex, sphereUV).r;

  if (landMask > u_LandMaskCutoff) {
    float waterDepth = 1 - bathymetry;
    magnitude = mix(0.95, 0.94, waterDepth);
  } else {
    magnitude = mix(0.95, 1, topology);
  }

  spherePosition *= magnitude;
  positions[vertexIndex] = spherePosition;
}
